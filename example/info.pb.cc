// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#include "info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dwt {
PROTOBUF_CONSTEXPR InfoRequest::InfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoRequestDefaultTypeInternal() {}
  union {
    InfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoRequestDefaultTypeInternal _InfoRequest_default_instance_;
PROTOBUF_CONSTEXPR InfoResponse::InfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoResponseDefaultTypeInternal() {}
  union {
    InfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoResponseDefaultTypeInternal _InfoResponse_default_instance_;
}  // namespace dwt
static ::_pb::Metadata file_level_metadata_info_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_info_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_info_2eproto[1];

const uint32_t TableStruct_info_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dwt::InfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dwt::InfoRequest, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::dwt::InfoRequest, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dwt::InfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dwt::InfoResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::dwt::InfoResponse, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::dwt::InfoResponse, _impl_.info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dwt::InfoRequest)},
  { 8, -1, -1, sizeof(::dwt::InfoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dwt::_InfoRequest_default_instance_._instance,
  &::dwt::_InfoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_info_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ninfo.proto\022\003dwt\"(\n\013InfoRequest\022\013\n\003uid\030"
  "\001 \001(\005\022\014\n\004type\030\002 \001(\005\";\n\014InfoResponse\022\017\n\007s"
  "uccess\030\001 \001(\010\022\014\n\004size\030\002 \001(\005\022\014\n\004info\030\003 \003(\014"
  "2@\n\016InfoServiceRpc\022.\n\007GetInfo\022\020.dwt.Info"
  "Request\032\021.dwt.InfoResponseB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_info_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_info_2eproto = {
    false, false, 199, descriptor_table_protodef_info_2eproto,
    "info.proto",
    &descriptor_table_info_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_info_2eproto::offsets,
    file_level_metadata_info_2eproto, file_level_enum_descriptors_info_2eproto,
    file_level_service_descriptors_info_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_info_2eproto_getter() {
  return &descriptor_table_info_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_info_2eproto(&descriptor_table_info_2eproto);
namespace dwt {

// ===================================================================

class InfoRequest::_Internal {
 public:
};

InfoRequest::InfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwt.InfoRequest)
}
InfoRequest::InfoRequest(const InfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:dwt.InfoRequest)
}

inline void InfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InfoRequest::~InfoRequest() {
  // @@protoc_insertion_point(destructor:dwt.InfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dwt.InfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwt.InfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwt.InfoRequest)
  return target;
}

size_t InfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwt.InfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoRequest::GetClassData() const { return &_class_data_; }


void InfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoRequest*>(&to_msg);
  auto& from = static_cast<const InfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dwt.InfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoRequest::CopyFrom(const InfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwt.InfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoRequest::IsInitialized() const {
  return true;
}

void InfoRequest::InternalSwap(InfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoRequest, _impl_.type_)
      + sizeof(InfoRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(InfoRequest, _impl_.uid_)>(
          reinterpret_cast<char*>(&_impl_.uid_),
          reinterpret_cast<char*>(&other->_impl_.uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_info_2eproto_getter, &descriptor_table_info_2eproto_once,
      file_level_metadata_info_2eproto[0]);
}

// ===================================================================

class InfoResponse::_Internal {
 public:
};

InfoResponse::InfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwt.InfoResponse)
}
InfoResponse::InfoResponse(const InfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){from._impl_.info_}
    , decltype(_impl_.success_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:dwt.InfoResponse)
}

inline void InfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){arena}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InfoResponse::~InfoResponse() {
  // @@protoc_insertion_point(destructor:dwt.InfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.~RepeatedPtrField();
}

void InfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dwt.InfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_info();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwt.InfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // repeated bytes info = 3;
  for (int i = 0, n = this->_internal_info_size(); i < n; i++) {
    const auto& s = this->_internal_info(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwt.InfoResponse)
  return target;
}

size_t InfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwt.InfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes info = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.info_.size());
  for (int i = 0, n = _impl_.info_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.info_.Get(i));
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoResponse::GetClassData() const { return &_class_data_; }


void InfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoResponse*>(&to_msg);
  auto& from = static_cast<const InfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dwt.InfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_.MergeFrom(from._impl_.info_);
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoResponse::CopyFrom(const InfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwt.InfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoResponse::IsInitialized() const {
  return true;
}

void InfoResponse::InternalSwap(InfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoResponse, _impl_.size_)
      + sizeof(InfoResponse::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(InfoResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_info_2eproto_getter, &descriptor_table_info_2eproto_once,
      file_level_metadata_info_2eproto[1]);
}

// ===================================================================

InfoServiceRpc::~InfoServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InfoServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_service_descriptors_info_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InfoServiceRpc::GetDescriptor() {
  return descriptor();
}

void InfoServiceRpc::GetInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dwt::InfoRequest*,
                         ::dwt::InfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInfo() not implemented.");
  done->Run();
}

void InfoServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_info_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dwt::InfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dwt::InfoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InfoServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dwt::InfoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InfoServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dwt::InfoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

InfoServiceRpc_Stub::InfoServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
InfoServiceRpc_Stub::InfoServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
InfoServiceRpc_Stub::~InfoServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void InfoServiceRpc_Stub::GetInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dwt::InfoRequest* request,
                              ::dwt::InfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dwt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dwt::InfoRequest*
Arena::CreateMaybeMessage< ::dwt::InfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwt::InfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dwt::InfoResponse*
Arena::CreateMaybeMessage< ::dwt::InfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwt::InfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
